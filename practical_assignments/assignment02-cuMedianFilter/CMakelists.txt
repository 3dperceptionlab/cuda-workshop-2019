############################################################################
# <project> cuMedianFilter 				</summary>
# <summary> cuda implementation Median Filter	</summary>
# <date>    2018-04-16          	</date>
# <author>  Sergio Orts-Escolano 	</author>
# <email>   sorts@ua.es 			</email>
############################################################################

cmake_minimum_required(VERSION 2.8)

if(COMMAND cmake_policy)
    cmake_policy(SET CMP0015 NEW)
endif(COMMAND cmake_policy)

SET( PROJECT_NAME median_filter_cuda )
project(${PROJECT_NAME})

file(GLOB cpp_files *.cpp)
file(GLOB h_files *.h)
file(GLOB cu_files *.cu)

source_group("Source Files" FILES ${cu_files} ${cpp_files})
source_group("Header Files" FILES ${h_files})

# Find dependencies
find_package(CUDA 6.0 REQUIRED)

# Compiler options
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS}
    -use_fast_math
    -res-usage)

# Set cuda compatible arquitectures (code generation) sm_20 Fermi, GTX 480 compatible
#list(APPEND CUDA_NVCC_FLAGS "-gencode=arch=compute_20,code=sm_20")
list(APPEND CUDA_NVCC_FLAGS "-gencode=arch=compute_61,code=sm_61")   #later architectures

set(CUDA_NVCC_FLAGS_DEBUG ${CUDA_NVCC_FLAGS} -g -G)
set(CUDA_NVCC_FLAGS_RELEASE ${CUDA_NVCC_FLAGS} -O3)

# Create and link the executable
cuda_add_executable(${PROJECT_NAME} ${cu_files} ${cpp_files} ${h_files})
target_link_libraries(${PROJECT_NAME} ${CUDA_LIBRARIES})

# Copy all bmp images to build directory
file(GLOB BMP_IMAGES "${PROJECT_SOURCE_DIR}/*.bmp")
file(COPY ${BMP_IMAGES} DESTINATION ${CMAKE_BINARY_DIR})